#!/bin/bash

# Script para limpar arquivos problem√°ticos copiados do Windows para WSL
# Smart Alarm Project - Windows File Cleanup

echo "üßπ Smart Alarm - Limpeza de Arquivos Windows ‚Üí WSL"
echo "=================================================="

# Fun√ß√£o para listar arquivos
list_files() {
    echo "üìã Listando arquivos problem√°ticos encontrados:"
    echo ""

    echo "üî∏ Arquivos .tmp:"
    find . -name "*.tmp" -type f | head -10
    echo "   ‚ÑπÔ∏è  Nota: commit.tmp ser√° preservado"

    echo ""
    echo "üî∏ Arquivos .bak:"
    find . -name "*.bak" -type f | head -10

    echo ""
    echo "üî∏ Arquivos :sec.endpointdlp (Windows Security):"
    find . -name "*:sec.endpointdlp" -type f | head -10

    echo ""
    echo "üî∏ Arquivos .orig:"
    find . -name "*.orig" -type f | head -10

    echo ""
    echo "üî∏ Total de arquivos problem√°ticos:"
    problematic_count=$(find . \( -name "*.tmp" -o -name "*.bak" -o -name "*.orig" -o -name "*:sec.endpointdlp" \) -type f | wc -l)
    echo "   $problematic_count arquivos encontrados"
    tmp_count=$(find . -name "*.tmp" -type f ! -name "commit.tmp" | wc -l)
    echo "   $tmp_count arquivos .tmp ser√£o removidos (commit.tmp preservado)"
}

# Fun√ß√£o para analisar por tipo
analyze_by_type() {
    echo ""
    echo "üìä An√°lise por tipo:"
    echo "==================="

    echo "üîπ Arquivos .tmp (tempor√°rios):"
    echo "   - Geralmente seguros para remover"
    echo "   - S√£o criados pelo build process e podem ser regenerados"
    echo "   - ‚ö†Ô∏è  EXCE√á√ÉO: commit.tmp ser√° preservado conforme solicitado"

    echo ""
    echo "üîπ Arquivos .bak (backup):"
    echo "   - Podem conter c√≥digo importante"
    echo "   - Revisar antes de remover"

    echo ""
    echo "üîπ Arquivos :sec.endpointdlp (Windows Defender):"
    echo "   - Criados pelo Windows Defender"
    echo "   - Seguros para remover no WSL"
    echo "   - S√£o duplicatas dos arquivos originais"

    echo ""
    echo "üîπ Arquivos .orig (merge conflicts):"
    echo "   - Podem conter c√≥digo de merge conflicts"
    echo "   - Revisar antes de remover"
}

# Fun√ß√£o para remover arquivos seguros
clean_safe_files() {
    echo ""
    echo "üßπ Removendo arquivos seguros para limpar..."
    echo "============================================"

    # Remove .tmp files (sempre seguros) - EXCETO commit.tmp
    echo "üóëÔ∏è  Removendo arquivos .tmp (exceto commit.tmp)..."
    find . -name "*.tmp" -type f ! -name "commit.tmp" -delete

    # Remove :sec.endpointdlp files (Windows Defender duplicates)
    echo "üóëÔ∏è  Removendo arquivos :sec.endpointdlp..."
    find . -name "*:sec.endpointdlp" -type f -delete

    # Remove arquivos obj tempor√°rios (exceto commit.tmp)
    echo "üóëÔ∏è  Removendo arquivos tempor√°rios obj..."
    find . -path "*/obj/*" -name "*.tmp" -type f ! -name "commit.tmp" -delete

    echo "‚úÖ Arquivos seguros removidos (commit.tmp preservado)!"
}

# Fun√ß√£o para listar arquivos que precisam de revis√£o
list_review_files() {
    echo ""
    echo "‚ö†Ô∏è  Arquivos que precisam de revis√£o manual:"
    echo "==========================================="

    echo "üîç Arquivos .bak (podem conter c√≥digo importante):"
    find . -name "*.bak" -type f

    echo ""
    echo "üîç Arquivos .orig (podem conter c√≥digo de merge):"
    find . -name "*.orig" -type f

    echo ""
    echo "üí° Para remover arquivos .bak ap√≥s revisar:"
    echo "   find . -name '*.bak' -type f -delete"
    echo ""
    echo "üí° Para remover arquivos .orig ap√≥s revisar:"
    echo "   find . -name '*.orig' -type f -delete"
}

# Fun√ß√£o para verificar git status
check_git_status() {
    echo ""
    echo "üìÑ Status do Git ap√≥s limpeza:"
    echo "=============================="
    git status --porcelain | head -20

    changed_files=$(git status --porcelain | wc -l)
    echo ""
    echo "üìä Total de arquivos modificados no git: $changed_files"
}

# Fun√ß√£o para criar .gitignore adicional se necess√°rio
update_gitignore() {
    echo ""
    echo "üìù Verificando .gitignore..."

    # Verificar se j√° tem as regras necess√°rias
    if ! grep -q "*.tmp" .gitignore; then
        echo "üîß Adicionando regras ao .gitignore..."
        echo "" >> .gitignore
        echo "# Windows cleanup - additional rules" >> .gitignore
        echo "*:sec.endpointdlp" >> .gitignore
        echo "*.zwc" >> .gitignore
        echo "*.zone.identifier" >> .gitignore
        echo "*.lnk" >> .gitignore
        echo "desktop.ini" >> .gitignore
        echo "Thumbs.db" >> .gitignore
        echo ""
        echo "‚úÖ Regras adicionadas ao .gitignore"
    else
        echo "‚úÖ .gitignore j√° cont√©m as regras necess√°rias"
    fi
}

# Menu principal
main_menu() {
    echo ""
    echo "üîß O que voc√™ gostaria de fazer?"
    echo "==============================="
    echo "1) Listar arquivos problem√°ticos"
    echo "2) Analisar tipos de arquivos"
    echo "3) Limpar arquivos seguros automaticamente"
    echo "4) Listar arquivos para revis√£o manual"
    echo "5) Verificar status do git"
    echo "6) Atualizar .gitignore"
    echo "7) Fazer limpeza completa (recomendado)"
    echo "8) Sair"
    echo ""
    read -p "Escolha uma op√ß√£o (1-8): " choice

    case $choice in
        1) list_files ;;
        2) analyze_by_type ;;
        3) clean_safe_files ;;
        4) list_review_files ;;
        5) check_git_status ;;
        6) update_gitignore ;;
        7)
            echo "üöÄ Executando limpeza completa..."
            list_files
            analyze_by_type
            clean_safe_files
            update_gitignore
            list_review_files
            check_git_status
            echo ""
            echo "‚úÖ Limpeza completa realizada!"
            ;;
        8)
            echo "üëã Saindo..."
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida. Tente novamente."
            main_menu
            ;;
    esac
}

# Execu√ß√£o principal
if [ "$1" == "--auto" ]; then
    echo "ü§ñ Modo autom√°tico - executando limpeza completa..."
    list_files
    clean_safe_files
    update_gitignore
    check_git_status
    echo ""
    echo "‚úÖ Limpeza autom√°tica conclu√≠da!"
    echo "‚ö†Ô∏è  Verifique manualmente os arquivos .bak e .orig se existirem"
else
    list_files
    main_menu
fi
