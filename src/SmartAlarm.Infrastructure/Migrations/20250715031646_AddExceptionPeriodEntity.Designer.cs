// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartAlarm.Infrastructure.Data;

#nullable disable

namespace SmartAlarm.Infrastructure.Migrations
{
    [DbContext(typeof(SmartAlarmDbContext))]
    [Migration("20250715031646_AddExceptionPeriodEntity")]
    partial class AddExceptionPeriodEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Alarm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Enabled");

                    b.Property<DateTime?>("LastTriggeredAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastTriggeredAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT")
                        .HasColumnName("Time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Alarms_UserId");

                    b.ToTable("Alarms", (string)null);
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.ExceptionPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ExceptionPeriods_UserId");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_ExceptionPeriods_UserActive");

                    b.HasIndex("UserId", "Type")
                        .HasDatabaseName("IX_ExceptionPeriods_UserType");

                    b.HasIndex("UserId", "StartDate", "EndDate")
                        .HasDatabaseName("IX_ExceptionPeriods_UserDate");

                    b.ToTable("ExceptionPeriods", null, t =>
                        {
                            t.HasCheckConstraint("CK_ExceptionPeriods_DateRange", "\"StartDate\" < \"EndDate\"");

                            t.HasCheckConstraint("CK_ExceptionPeriods_DescriptionLength", "\"Description\" IS NULL OR LENGTH(\"Description\") <= 500");

                            t.HasCheckConstraint("CK_ExceptionPeriods_NameLength", "LENGTH(\"Name\") > 0");
                        });
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_Holidays_Recurring")
                        .HasFilter("date(Date) LIKE '0001-%'");

                    b.ToTable("Holidays", (string)null);
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Integration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<Guid>("AlarmId")
                        .HasColumnType("TEXT")
                        .HasColumnName("AlarmId");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Configuration");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastExecutedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastExecutedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Provider");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId")
                        .HasDatabaseName("IX_Integrations_AlarmId");

                    b.HasIndex("Provider")
                        .HasDatabaseName("IX_Integrations_Provider");

                    b.ToTable("Integrations", (string)null);
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Roles_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Routine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Actions");

                    b.Property<Guid>("AlarmId")
                        .HasColumnType("TEXT")
                        .HasColumnName("AlarmId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId")
                        .HasDatabaseName("IX_Routines_AlarmId");

                    b.ToTable("Routines", (string)null);
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<Guid>("AlarmId")
                        .HasColumnType("TEXT")
                        .HasColumnName("AlarmId");

                    b.Property<int>("DaysOfWeek")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DaysOfWeek");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsActive");

                    b.Property<int>("Recurrence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Recurrence");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("TEXT")
                        .HasColumnName("Time");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId")
                        .HasDatabaseName("IX_Schedules_AlarmId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Schedules_IsActive");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastLoginAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.UserCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AaGuid")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CredType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CredentialId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<uint>("SignatureCounter")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("UserHandle")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCredential");
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("ExpiresAt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsActive");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserRoles_IsActive");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRoles_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRoles_UserId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Integration", b =>
                {
                    b.HasOne("SmartAlarm.Domain.Entities.Alarm", null)
                        .WithMany("Integrations")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Routine", b =>
                {
                    b.HasOne("SmartAlarm.Domain.Entities.Alarm", null)
                        .WithMany("Routines")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("SmartAlarm.Domain.Entities.Alarm", null)
                        .WithMany("Schedules")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.UserCredential", b =>
                {
                    b.HasOne("SmartAlarm.Domain.Entities.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("SmartAlarm.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAlarm.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Alarm", b =>
                {
                    b.Navigation("Integrations");

                    b.Navigation("Routines");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SmartAlarm.Domain.Entities.User", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
